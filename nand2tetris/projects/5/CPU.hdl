// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // is it A-command or C-command?
    Not(in=instruction[15], out=isACommand);
    Not(in=isACommand, out=isCCommand);
    
    // write to M?
    And(a=isCCommand, b=instruction[3], out=writeM);

    // if it is A-command
    // use instruction as input for A
    // otherwise it could be the output of the ALU
    Mux16(a=ALUOutput, b=instruction, sel=isACommand, out=inA);
    
    // load A if it is C-command and its dest bit points to A
    // or it is A-command
    And(a=isCCommand, b=instruction[5], out=cSaveA);
    Or(a=cSaveA, b=isACommand, out=loadA);
    
    ARegister(in=inA, load=loadA, out=A, out[0..14]=addressM);
    
    DRegister(in=ALUOutput, load=instruction[4], out=D);

    // use A value or M value?
    Mux16(a=A, b=inM, sel=instruction[12], out=AOrM);
    
    ALU(x=D, y=AOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOutput, out=outM, zr=outZero, ng=outNeg);
    
    Or(a=outZero, b=outNeg, out=outNotPos);
    Not(in=outNotPos, out=outPos);

    // jump condition?
    And(a=instruction[2], b=outNeg, out=jumpNeg);
    And(a=instruction[1], b=outZero, out=jumpZero);
    And(a=instruction[0], b=outPos, out=jumpPos);
    
    Or(a=jumpNeg, b=jumpPos, out=jumpNonZero);
    Or(a=jumpZero, b=jumpNonZero, out=preJump);
    And(a=preJump, b=isCCommand, out=jump);

    PC(in=A, load=jump, inc=true, reset=reset, out[0..14]=pc);
    
}